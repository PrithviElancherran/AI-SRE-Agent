[
  {
    "playbook_id": "PB-LATENCY-001",
    "name": "High Latency Troubleshooting",
    "version": "1.2.0",
    "description": "Systematic approach to diagnose and resolve API latency issues",
    "metadata": {
      "created_by": "SRE Team",
      "created_at": "2024-01-15T10:00:00Z",
      "last_updated": "2024-11-20T15:30:00Z",
      "applicable_services": [
        "payment-api",
        "user-api",
        "order-api"
      ],
      "trigger_conditions": [
        "API latency > 3s",
        "Response time degradation > 50%",
        "User complaints about slow responses"
      ]
    },
    "effectiveness_score": 0.87,
    "steps": [
      {
        "step_id": "step_1",
        "description": "Check cache hit rate for potential cache misses",
        "query": "redis/cache_hit_rate",
        "expected_result": {
          "threshold": "> 80%",
          "healthy_range": "85-95%"
        },
        "escalation_condition": "< 60%",
        "order": 1,
        "step_type": "monitoring_check",
        "gcp_integration": {
          "service": "monitoring",
          "metric": "redis/cache_hit_rate",
          "labels": {
            "service": "cache"
          }
        }
      },
      {
        "step_id": "step_2",
        "description": "Verify database connection pool utilization",
        "query": "cloudsql/database/connection_count",
        "expected_result": {
          "threshold": "< 80%",
          "healthy_range": "40-70%"
        },
        "escalation_condition": "> 90%",
        "order": 2,
        "step_type": "monitoring_check",
        "gcp_integration": {
          "service": "monitoring",
          "metric": "cloudsql/database/connection_count"
        }
      },
      {
        "step_id": "step_3",
        "description": "Analyze distributed tracing for slow spans",
        "query": "get_user_data span analysis",
        "expected_result": {
          "threshold": "< 1s",
          "healthy_range": "100-500ms"
        },
        "escalation_condition": "> 3s",
        "order": 3,
        "step_type": "tracing_analysis",
        "gcp_integration": {
          "service": "tracing",
          "operation": "get_user_data"
        }
      },
      {
        "step_id": "step_4",
        "description": "Check for recent deployments or configuration changes",
        "query": "deployment history last 24h",
        "expected_result": {
          "threshold": "no recent changes",
          "correlation": "timing with issue"
        },
        "escalation_condition": "recent deployment found",
        "order": 4,
        "step_type": "change_analysis"
      }
    ]
  },
  {
    "playbook_id": "PB-DB-TIMEOUT-001",
    "name": "Database Timeout Troubleshooting",
    "version": "1.1.0",
    "description": "Systematic approach to diagnose database connection and query timeout issues",
    "metadata": {
      "created_by": "Database Team",
      "created_at": "2024-02-10T14:00:00Z",
      "last_updated": "2024-11-18T09:45:00Z",
      "applicable_services": [
        "ecommerce-api",
        "inventory-service",
        "order-service"
      ],
      "trigger_conditions": [
        "Database connection timeout",
        "Connection pool exhaustion",
        "Query execution time > 10s"
      ]
    },
    "effectiveness_score": 0.92,
    "steps": [
      {
        "step_id": "step_1",
        "description": "Check database connection pool utilization",
        "query": "cloudsql/database/connection_count",
        "expected_result": {
          "threshold": "< 80%",
          "healthy_range": "40-70%"
        },
        "escalation_condition": "> 90%",
        "order": 1,
        "step_type": "monitoring_check",
        "gcp_integration": {
          "service": "monitoring",
          "metric": "cloudsql/database/connection_count"
        }
      },
      {
        "step_id": "step_2",
        "description": "Search for connection timeout errors in logs",
        "query": "connection_timeout OR connection_refused",
        "expected_result": {
          "threshold": "< 5 errors/hour",
          "pattern": "no systematic failures"
        },
        "escalation_condition": "> 10 errors/hour",
        "order": 2,
        "step_type": "log_analysis",
        "gcp_integration": {
          "service": "logging",
          "filter": "connection_timeout OR connection_refused"
        }
      },
      {
        "step_id": "step_3",
        "description": "Analyze slow query performance",
        "query": "cloudsql/database/query_execution_time",
        "expected_result": {
          "threshold": "< 1s average",
          "healthy_range": "100-500ms"
        },
        "escalation_condition": "> 5s average",
        "order": 3,
        "step_type": "performance_analysis",
        "gcp_integration": {
          "service": "monitoring",
          "metric": "cloudsql/database/query_execution_time"
        }
      },
      {
        "step_id": "step_4",
        "description": "Identify long-running queries using Performance Insights",
        "query": "slow_queries_analysis",
        "expected_result": {
          "threshold": "no queries > 30s",
          "action": "identify bottlenecks"
        },
        "escalation_condition": "queries > 60s found",
        "order": 4,
        "step_type": "query_analysis",
        "gcp_integration": {
          "service": "cloudsql",
          "feature": "performance_insights"
        }
      }
    ]
  },
  {
    "playbook_id": "PB-CPU-001",
    "name": "High CPU Troubleshooting",
    "version": "1.0.0",
    "description": "Systematic approach to diagnose high CPU utilization issues",
    "metadata": {
      "created_by": "Infrastructure Team",
      "created_at": "2024-03-01T11:00:00Z",
      "last_updated": "2024-11-15T16:20:00Z",
      "applicable_services": [
        "all"
      ],
      "trigger_conditions": [
        "CPU utilization > 80%",
        "Sustained high CPU for > 10 minutes"
      ]
    },
    "effectiveness_score": 0.79,
    "steps": [
      {
        "step_id": "step_1",
        "description": "Check CPU utilization across all instances",
        "query": "compute/instance/cpu_utilization",
        "expected_result": {
          "threshold": "< 70%",
          "healthy_range": "20-60%"
        },
        "escalation_condition": "> 90%",
        "order": 1,
        "step_type": "monitoring_check"
      },
      {
        "step_id": "step_2",
        "description": "Identify top CPU-consuming processes",
        "query": "process_cpu_analysis",
        "expected_result": {
          "threshold": "no single process > 50%",
          "action": "identify resource hogs"
        },
        "escalation_condition": "process consuming > 80%",
        "order": 2,
        "step_type": "process_analysis"
      }
    ]
  }
]